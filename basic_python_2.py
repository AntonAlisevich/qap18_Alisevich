print("*******Работа с переменными:******")
# 1. Переменной var_int присвойте значение 10, var_float - значение 8.4, var_str - "No".

var_int = 10
var_float = 8.4
var_str = "No"

# 2. Измените значение, хранимое в переменной var_int, увеличив его в 3.5 раза,
# результат свяжите с переменной big_int.

var_int *= 3.5
big_int = var_int
print(big_int)

# 3. Измените значение, хранимое в переменной var_float, уменьшив его на единицу,
# результат свяжите с той же переменной.

var_float -= 1
big_int = var_float
print(big_int)

# 4. Разделите var_int на var_float, а затем big_int на var_float. Результат данных
# выражений не привязывайте ни к каким переменным.

print(var_int/var_float)
print(big_int/var_float)

# 5. Измените значение переменной var_str на "NoNoYesYesYes". При формировании
# нового значения используйте операции конкатенации (+) и повторения строки (*).

var_str = "No"*2 + "Yes" * 3

# 6. Выведите значения всех переменных.

print(var_str)
print(var_int)
print(var_float)
print(big_int)
print("*******Строки:******")

# 1. Свяжите переменную с любой строкой, состоящей не менее чем из 8 символов.
# Извлеките из строки первый символ, затем последний, третий с начала и третий с
# конца. Измерьте длину вашей строки.

stroka = "abcdefghij"

print(len(stroka))
print(stroka[0])
print(stroka[-1])
print(stroka[2])
print(stroka[-3])

# 2. Присвойте произвольную строку длиной 10-15 символов переменной и извлеките из
# нее следующие срезы:
# ● первые восемь символов
print(stroka[0:8])

# ● четыре символа из центра строки

line_str = len(stroka)//2
nrw = stroka[line_str-2: line_str+2]
print(nrw)

# ● символы с индексами кратными трем
print(stroka[::3])

# ● переверните строку
print(stroka[::-1])

# 3. Есть строка: “my name is name”. Напечатайте ее, но вместо 2ого “name” вставьте
# ваше имя.

s = "my name is name"
print(s[:10] + s[10:].replace("name", "Anton"))

# 4. Есть строка: test_tring = "Hello world!", необходимо

test_tring = "Hello world!"

# ● напечатать на каком месте находится буква w
print(test_tring.find("w"))

# ● кол-во букв l
amount = test_tring.count("l")
print(amount)

# ● Проверить начинается ли строка с подстроки: “Hello”
print(test_tring.startswith("Hello"))

# ● Проверить заканчивается ли строка подстрокой: “qwe”
print(test_tring.endswith("qwe"))

print("*******Списки:******")
# 1. Создайте два любых списка и свяжите их с переменными.

list_one = [1, 5, "anton", True]
list_two = [False, 4, "vova", 7]

# 2. Извлеките из первого списка второй элемент.

print(list_one[1])

# 3. Измените во втором списке последний элемент. Выведите список на экран.

list_two.append("asd")
print(list_two)

# 4. Соедините оба списка в один, присвоив результат новой переменной. Выведите
# получившийся список на экран.

list_one.extend(list_two)
new_list = list_one
print(new_list)

# 5. "Снимите" срез из соединенного списка так, чтобы туда попали некоторые части
# обоих первых списков. Срез свяжите с очередной новой переменной. Выведите
# значение этой переменной.


s = new_list[-(len(list_two))-1:-(len(list_two))+2]
print(s)
print(s)

# 6. Добавьте в список два новых элемента и снова выведите его.

s.append("new value to s")
s.insert(2, "IndeX")
print(s)

# 7. Даны списки:

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

# Нужно вернуть список, который состоит из элементов, общих для этих двух
# списков. -- !не использовать циклы

similar = set(a).intersection(b)
print(similar)

# 8. Есть список: [1, 2, 3, 4, 3, 2, 5, 1, 4, 6, 7, 1, 8, 2, 3] оставить в нем только уникальные
# значения. !не использовать циклы

a = list(set(a))
print(a)

print("*******Логические операции:******")
# 1. Присвойте двум переменным любые числовые значения.
h = 10
j = 12
# 2. Составьте четыре сложных логических выражения с помощью оператора and, два из
# которых должны давать истину, а два других - ложь.

print((h and j) != 22)
print((h and j) > 9)
print((h and j) == 22)
print((h + j)*1 and h+j > 22)

# 3. Аналогично выполните п. 2, но уже используя оператор or.

print("-------")
print(h == 12 or j == 12)
print(h == 10 or j > 9)
print(h + h == 22 or j + j == 22)
print((h + j)*1 > 22 or h+j > 22)

# 4. Попробуйте использовать в сложных логических выражениях работу с переменными
# строкового типа.

print("-------")
logic_srt = "string"
another_logic_srt = "string"

print((logic_srt and another_logic_srt) == "string")

print("*******Словари:******")
# 1. Создайте словарь, связав его с переменной school, и наполните его данными,
# которые бы отражали количество учащихся в десяти разных классах (например, 1а, 1б,
# 2б, 6а, 7в и т.д.).

school = {
    "1a": 15,
    "1b": 17,
    "2a": 16,
    "2b": 18,
    "3a": 13,
    "3b": 18,
    "4a": 15,
    "4b": 20,
    "5a": 16,
    "5b": 22,
}

# 2. Узнайте сколько человек в каком-нибудь классе.
print(school["2b"])
# 3. Представьте, что в школе произошли изменения, внесите их в словарь:

# ◦ в трех классах изменилось количество учащихся;
school["2b"] = 99
school["3b"] = 99
school["1b"] = 99

# ◦ в школе появилось два новых класса;
school["10B"] = 88
school["10C"] = 77

# ◦ в школе расформировали один из классов.
school.pop("1a")

# 4. Выведите содержимое словаря на экран.
print(school)

print("*******Преобразования типов:******")
# 1. Перевести строку в массив
# "Robin Singh" => ["Robin”, “Singh"]
# "I love arrays they are my favorite" => ["I", "love", "arrays", "they", "are", "my", "favorite"]

e = "Robin Singh"
r = "I love arrays they are my favorite"

print(e.split(" "))
print(r.split(" "))

# 2. Дан список: [‘Ivan’, ‘Ivanou’], и 2 строки: Minsk, Belarus
# Напечатайте текст: “Привет, Ivan Ivanou! Добро пожаловать в Minsk Belarus”

ivan_list = ["Ivan", "Ivanou"]
city_str = "Minsk"
country_str = "Belarus"

print(f"Привет, {" ".join(ivan_list)}! Добро пожаловать в {city_str} {country_str}")

# 3. Дан список ["I", "love", "arrays", "they", "are", "my", "favorite"] сделайте из него
# строку => "I love arrays they are my favorite"

love_lst = ["I", "love", "arrays", "they", "are", "my", "favorite"]
print(" ".join(love_lst))

# 4. Создайте список из 10 элементов, вставьте на 3-ю позицию новое значение,
# удалите элемент из списка под индексом 6

ten_lst = [1, 2, 3, "I", "love", "arrays", "they", "are", "my", "favorite"]

ten_lst.insert(2, "IndeX")
ten_lst.pop(6)

print(ten_lst)

# 5.
# Есть 2 словаря
# a = { 'a': 1, 'b': 2, 'c': 3}
# b = { 'c': 3, 'd': 4,'e': 5}
# Необходимо их объединить по ключам, а значения ключей поместить в список, если у
# одного словаря есть ключ "а", а у другого нету, то поставить значение None на
# соответствующую позицию(1-я позиция для 1-ого словаря, вторая для 2-ого)
# ab = {'a': [1, None], 'b': [2, None], 'c': [3, 3], 'd': [None, 4], 'e': [None, 5]}

aa = {'a': 1, 'b': 2, 'c': 3}
bb = {'c': 3, 'd': 4, 'e': 5}

ab = {}
for key in aa:
    ab[key] = [aa.get(key), bb.get(key)]
for key in bb:
    ab[key] = [aa.get(key), bb.get(key)]
print(ab)

# *1) Вам передан массив чисел. Известно, что каждое число в этом массиве имеет пару,
# кроме одного: [1, 5, 2, 9, 2, 9, 1] => 5
# Напишите программу, которая будет выводить уникальное число
# *2) Дан текст, который содержит различные английские буквы и знаки препинания. Вам
# необходимо найти самую частую букву в тексте. Результатом должна быть буква в
# нижнем регистре.
# При поиске самой частой буквы, регистр не имеет значения, так что при подсчете
# считайте, что "A" == "a". Убедитесь, что вы не считайте знаки препинания, цифры и
# пробелы, а только буквы.
# Если в тексте две и больше буквы с одинаковой частотой, тогда результатом будет
# буква, которая идет первой в алфавите. Для примера, "one" содержит "o", "n", "e" по
# одному разу, так что мы выбираем "e".
# "a-z" == "a"
# "Hello World!" == "l"
# "How do you do?" == "o"
# "One" == "e"
# "Oops!" == "o"
# "AAaooo!!!!" == "a"
# "a" * 9000 + "b" * 1000 == "a"
print("*******Условия:******")
# 1. Дано целое число. Если оно является положительным, то прибавить к нему 1; в
# противном случае не изменять его. Вывести полученное число.

numb = -15

if numb > 0:
    numb += 1
else:
    print(numb)

# 2. Даны три целых числа. Найти количество положительных чисел в исходном
# наборе.

n1 = 14
n2 = 15
n3 = -3
counter = 0

if n1 > 0:
    counter += 1
if n2 > 0:
    counter += 1
if n3 > 0:
    counter += 1

print(counter)

# 3. Дан номер года (положительное целое число). Определить количество дней в
# этом году, учитывая, что обычный год насчитывает 365 дней, а високосный — 366
# дней. Високосным считается год, делящийся на 4, за исключением тех годов, которые
# делятся на 100 и не делятся на 400 (например, годы 300, 1300 и 1900 не являются
# високосными, а 1200 и 2000 являются).

year = 1900

if year%400 == 0:
    print(366)
elif year%100 == 0:
    print(365)
elif year%4 == 0:
    print(366)
else:
    print(365)

# 4. Дано целое число в диапазоне 1–7. Вывести строку — название дня недели,
# соответствующее данному числу (1 — «понедельник», 2 — «втор- ник» и т. д.).

number = 3

if number == 1:
    print("1 — «понедельник»")
elif number == 2:
    print("2 — «вторник»")
elif number == 3:
    print("3 — «среда»")
elif number == 4:
    print("4 — «четверг»")
elif number == 5:
    print("5 — «пятница»")
elif number == 6:
    print("6 — «суббота»")
elif number == 7:
    print("7 — «воскресенье»")

# 5. Единицы массы пронумерованы следующим образом: 1 — килограмм, 2 —
# миллиграмм, 3 — грамм, 4 — тонна, 5 — центнер. Дан номер едини- цы массы (целое
# число в диапазоне 1–5) и масса тела в этих единицах (вещественное число). Найти
# массу тела в килограммах.

body = 54
number_weight = 4

if number_weight == 1:
    print(body)
elif number_weight == 2:
    body *= 0.000001
    print(body)
elif number_weight == 3:
    body *= 1000
    print(body)
elif number_weight == 4:
    body *= 0.001
    print(body)
elif number_weight == 5:
    body *= 0.01
    print(body)

print("*******Цикл for:******")
# 1. Даны два целых числа A и B (A < B). Найти сумму всех целых чисел от A до B
# включительно.

A, B = 12, 16
summ = 0

for i in range(A, B+1):
    summ += i
print(summ)

# 2. Найти сумму всех натуральных чисел в от A до B

summ2 = 0

for i in range(A, B):
    summ2 += i
print(summ2)

# 3. Найти произведение положительных, сумму и количество отрицательных
# из 10 введенных целых значений.

dd = [1, 4, 5, 7, 8, -3, -6, 1, -1, 0]
multi = 1
count = 0
minus = 0

for i in dd:
    if i > 0:
        multi *= i
    elif i < 0:
        count+=1
        minus+=i
print(multi, count, minus)

# 4. Дан словарь пловцов с их результатами. Напечатать лучший результат
swim = {
"Бекиш Александр": 21.07,
"Будник Алексей": 20.34,
"Гребень Анастасия": 22.12,
"Давидович Татьяна": 30,
"Дешук Дмитрий": 24.01,
"Казак Анна": 28.17
}

best = swim.get("Бекиш Александр")

for i in swim:
    if swim.get(i) < best:
        best = swim.get(i)
print(best)


# 5. Есть массив чисел. Известно, что каждое число в этом массиве имеет пару,
# кроме одного: [1, 5, 2, 9, 2, 9, 1] => 5. Напишите программу, которая будет выводить
# уникальное число

list_list = [1, 5, 2, 9, 2, 9, 1]

for i in list_list:
    if list_list.count(i) == 1:
        print(i)

print("*******Цикл while:******")
# 1. Дано число N. Найти произведение всех чисел от 0 до N.

N = 8
mul = 1

while N > 1:
    mul *= N
    N -= 1
print(mul)

# 2. Поле засеяли цветами двух сортов на площади S1 и S2. Каждый год
# площадь цветов первого сорта увеличивается вдвое, а площадь второго сорта
# увеличивается втрое. Через сколько лет площадь первых сортов будет
# составлять меньше 10% от площади вторых сортов.

S1 = 2
S2 = 4
years = 0

while S1 >= 0.1 * S2:
    S1 *= 2
    S2 *= 3
    years += 1

print(years)

# 3. Дано целое число N (>0). Используя операции деления нацело и взятия
# остатка от деления, найти количество и сумму его цифр.

N = 3467
count1 = 0
summ3 = 0

while N > 0:
    count1 += 1
    summ3 += N % 10
    N = N // 10

print(count1, summ3)

# 4. Деду M лет, а внуку N лет. Через сколько лет дед станет вдвое старше
# внука. И сколько при этом лет будет деду и внуку.

M = 56
N = 5
years = 0

while N * 2 != M:
    M += 1
    N += 1
    years += 1

print(years, N, M)
