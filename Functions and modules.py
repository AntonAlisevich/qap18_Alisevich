# 1 Напишите функцию is_year_leap, которая принимает число (год) и возвращает true, если год високосный false если нет.

def is_year_leap(year):
    """Функция принимает число как год и выводит Истинно или Ложно, что год является высокосным,
     где год делящийся на 4 и 400 без остатка является высокосным и делящийся на 100 и не делящийся на 4 является
    не высокосным"""
    if year % 400 == 0:
        print(True)
    elif year % 100 == 0:
        print(False)
    elif year % 4 == 0:
        print(True)
    else:
        print(False)


is_year_leap(1904)


# 2 Напишите функцию generate_natural_cubes(n), которая принимает число n и возвращает список, состоящий из кубов первых
# n натуральных чисел. То есть [1**3, 2**3, 3**3, ..., n**3]. Обязательно использование генераторов списков.

def generate_natural_cubes(n):
    """Функция принимает число n и возвращает список, состоящий из кубов первых n натуральных чиселб где b есть
    возвращаемый список"""
    b = [i**3 for i in range(1, n)]
    return b

print(generate_natural_cubes(7))

# 3 Напишите функцию generate_squares, которая принимает произвольное количество аргументов и возвращает список,
# состоящий из их квадратов.То есть generate_squares(1, 2, 3) -> [1, 4, 9]

def generate_squares(x, y, z):
    """Функция принимает произвольное количество аргументов и возвращает список, состоящий из их квадратов, где
    i это квадрат x
    j это квадрат y
    k это квадрат z"""
    i = x**2
    j = y**2
    k = z**2
    return [i, j, k]

print(generate_squares(2, 3, 4))

# 4 Напишите функцию get_longest_word, которая на вход принимает текст (только английские слова и пробелы), и возвращает
# самое длинное слово из этого текста. Для разбиения строки на слова используйте функцию split.

def get_longest_word(text):
    """Фуекция на вход принимает текст, и возвращает самое длинное слово из этого текста, где
    maximum - список с длиннами элементов
    max_el - максимальная длинна слова
    max_indentifyer - индекс указанного слова с максимальной длинной"""
    d = text.split()
    maximum = list(map(len, d))
    max_el = max(maximum)
    max_indentifyer = maximum.index(max_el)
    return d[max_indentifyer]

print(get_longest_word("asd werr asdf asdasdfa"))
